---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT RULES & CODING STANDARDS

Comprehensive validation must be added across all text input fields in the project wherever required. When using `useCallback` in TypeScript, ensure the correct syntax for return type annotations is used. The correct syntax is `useCallback((): boolean => { ... })` and not `useCallback((): boolean => { ... }`. Ensure all JSX components have corresponding closing tags and proper nesting. When authenticating users against a database without Supabase Auth accounts, the login function should query the users table directly by email. Password validation must be implemented with proper hashing and validation, and should not be disabled in production environments. User roles from the database should be properly mapped to application roles. When authenticating users against a database without Supabase Auth accounts, the login function must query the users table directly by email, skipping Supabase Auth. Password validation must be implemented (but can be temporarily disabled for local testing). Role mapping should handle roles such as admin, manager, salesperson, credit-ops, and compliance.

The application uses a dual authentication system:

1.  Supabase Auth users (new signups with proper authentication)
2.  Database-only users (existing users without Supabase Auth accounts)

Registration must create Supabase Auth users and sync to the database, assigning roles via the `user_roles` table. The registration form should offer roles that match the database: `salesperson`, `manager`, `credit-ops`, `admin`, and `auditor`, and `compliance`.

The `users` table includes the following fields: `id`, `full_name`, `email`, `mobile`, `email_verified_at`, `remember_token`, `department_id`, `employment_type_id`, `organization_id`, `status`, `metadata`, `created_at`, `updated_at`, `deleted_at`, `auth_id`, `role`, `password_hash`, `first_name`, `last_name`, `phone`, `is_active`, `last_login_at`. Passwords are handled by Supabase Auth, and the `auth_id` field links to Supabase Auth users. The `full_name` field should be used instead of separate first/last names. Use `mobile` instead of `phone`. The `role` field is stored directly in the `users` table.

The `src/contexts/AuthContextFixed.tsx` file is the main authentication context for the Veriphy Bank frontend application. When importing `AuthContext`, ensure to import from `AuthContextFixed` due to the actual file name.

To create the `system_settings` table in your Supabase database:

1.  Go to your Supabase Dashboard: <https://supabase.com/dashboard>
2.  Navigate to your project
3.  Go to **SQL Editor**
4.  Run the following SQL script to create the table:

```sql
-- Create system_settings table
CREATE TABLE IF NOT EXISTS system_settings (
    id BIGSERIAL PRIMARY KEY,
    key VARCHAR(100) NOT NULL UNIQUE,
    value TEXT,
    description TEXT,
    category VARCHAR(50) DEFAULT 'general',
    is_encrypted BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT true
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_system_settings_key ON system_settings(key);
CREATE INDEX IF NOT EXISTS idx_system_settings_category ON system_settings(category);
CREATE INDEX IF NOT EXISTS idx_system_settings_active ON system_settings(is_active);
```

After creating the table, run this SQL to insert the default settings:

```sql
-- Insert default system settings
INSERT INTO system_settings (key, value, description, category) VALUES
('app_name', 'Veriphy Bank', 'Application name', 'general'),
('app_version', '1.0.0', 'Application version', 'general'),
('max_login_attempts', '5', 'Maximum login attempts before account lockout', 'security'),
('session_timeout_minutes', '30', 'Session timeout in minutes', 'security'),
('password_min_length', '8', 'Minimum password length', 'security'),
('password_require_special', 'true', 'Require special characters in password', 'security'),
('kyc_verification_required', 'true', 'KYC verification required for new accounts', 'security'),
('transaction_limit_daily', '100000', 'Daily transaction limit in INR', 'business'),
('transaction_limit_monthly', '1000000', 'Monthly transaction limit in INR', 'business'),
('whatsapp_enabled', 'true', 'WhatsApp integration enabled', 'integration'),
('audit_log_retention_days', '2555', 'Audit log retention period in days', 'system'),
('document_encryption_enabled', 'true', 'Document encryption enabled', 'security'),
('two_factor_auth_enabled', 'true', 'Two-factor authentication enabled', 'security'),
('maintenance_mode', 'false', 'System maintenance mode', 'system'),
('email_notifications_enabled', 'true', 'Email notifications enabled', 'notification'),
('sms_notifications_enabled', 'true', 'SMS notifications_enabled', 'notification'),
('push_notifications_enabled', 'true', 'Push notifications enabled', 'notification'),
('auto_logout_minutes', '60', 'Auto logout timeout in minutes', 'security'),
('password_reset_expiry_hours', '24', 'Password reset link expiry in hours', 'security'),
('file_upload_max_size_mb', '10', 'Maximum file upload size in MB', 'system'),
('supported_file_types', 'pdf,jpg,jpeg,png,doc,docx', 'Supported file types for uploads', 'system')
ON CONFLICT (key) DO NOTHING;
```

To verify the table was created and data was inserted, run:

```sql
-- Verify the table was created and data was inserted
SELECT 'system_settings table created successfully' as status;
SELECT COUNT(*) as total_settings FROM system_settings;
SELECT key, value, category FROM system_settings ORDER BY category, key;
```

The database tables must be populated with data according to the user roles to have a proper functioning flow.

When inserting into the `customers` table, ensure that the `kyc_status` value is a valid enum value. Valid `kyc_status` values:
- `'pending'` - For customers awaiting KYC verification
- `'verified'` - For customers with completed KYC
- `'rejected'` - For customers with rejected KYC
- `'under_review'` - For customers under KYC review

When inserting into the `customers` table, ensure that the `organization_id` column is included, as it has a NOT NULL constraint. The `customers` table schema contains the following:
- `id` (auto-generated)
- `full_name` (required)
- `kyc_status` (required, defaults to 'pending')
- `organization_id` (required)

The `customers` table has `mobile` column for phone number, not `phone`. The `customers` table has `dob` column for date of birth, not `date_of_birth`. `user_id` is optional (nullable).

When inserting into the `cases` table, ensure that the `organization_id`, `case_number`, `customer_id`, and `product_id` columns are included, as they have NOT NULL constraints. The `status` column defaults to `'open'`, and the `priority` column defaults to `'medium'`. The `case_number` should follow a realistic case numbering system (e.g., `CASE-2024-001`).

**The valid enum values for `case_status` were: `'new'`, `'in-progress'`, `'review'`, `'approved'`, `'rejected'`, and `'on-hold'`. Use these values when querying or updating the `cases` table.** The actual valid enum values as of 2025-09-24 are: `'open'`, `'in_progress'`, `'closed'`, and `'rejected'`.
Valid `priority` enum values are `low`, `medium`, and `high`.

When inserting into the `documents` table, be aware of the following:
- The schema uses `customer_id` instead of `case_id`.
- `organization_id` is a required field.
- Fields like `file_name`, `file_path`, `file_size`, `file_type`, `uploaded_at`, and `notes` do not exist.
- The schema has fields like `file_id`, `uploaded_by`, `verified_by`, and `verified_on`.

When writing Supabase queries involving the `documents` table, ensure that you use `customer_id` rather than `loan_application_id` to filter documents.

When encountering HTTP 400 or 406 errors when querying users by `auth_id` or direct `id`, especially for the super admin user, it indicates that the queries are not correctly handling database-only users. The following rules apply:

- **Dual Authentication Handling:** Methods must handle both Supabase Auth users (identified by `auth_id`) and database-only users (identified by direct `id`).
- **getUserById Method:** Fix `getUserById` and related methods to properly handle database-only users. Attempt to find the user by `auth_id` first, and if not found, then attempt to find the user by their direct `id`.
- **Team Member Fetching:** Ensure team member fetching handles a mix of Supabase Auth and database-only users.
- **ID Format Detection**: Use regex `/^\d+$/` to detect numeric IDs vs UUIDs.
- **Direct Database ID Usage**: When a numeric ID is detected, use it directly without attempting `auth_id` lookup.
- **Empty User ID Handling**: In the `getWorkloadTasks` and `getUserById` methods, return an empty array or null respectively if no `userId` is provided, or if the `userId` is an empty string.

When displaying user initials based on the user's full name, check for null or undefined names and provide a fallback initial.

When accessing the `length` property of a potentially undefined variable (e.g., `approvalQueue`), use the optional chaining operator (`?.`) to prevent errors. For example: `approvalQueue?.length || 0`.

When using the `useApprovalQueue` hook, destructure the returned data as `{ data: approvalQueue, loading, error, refetch }`, as the hook returns the approval queue data under the `data` property.

When fetching cases with compliance issues, use the `'on-hold'` status instead of `'compliance-issue'`.

When populating the database with initial demo data, use the following guidelines regarding `case_status`:

The valid enum values for `case_status` are: `open`, `in_progress`, `closed`, `rejected`. Valid `priority` enum values are `low`, `medium`, and `high`.
If these values are not valid in your specific database, use the following SQL to determine valid values:

```sql
-- Get all enum values for data setup (fixed version)
SELECT 'case_status_t' as enum_name, unnest(enum_range(NULL::case_status_t))::text as enum_value
UNION ALL

-- 2. case_priority_t values  
SELECT 'case_priority_t', unnest(enum_range(NULL::case_priority_t))::text
UNION ALL

-- 3. kyc_status_t values
SELECT 'kyc_status_t', unnest(enum_range(NULL::kyc_status_t))::text
UNION ALL

-- 4. doc_status_t values
SELECT 'doc_status_t', unnest(enum_range(NULL::doc_status_t))::text
UNION ALL

-- 5. file_type_t values
SELECT 'file_type_t', unnest(enum_range(NULL::file_type_t))::text
UNION ALL

-- 6. task_priority_t values
SELECT 'task_priority_t', unnest(enum_range(NULL::task_priority_t))::text
UNION ALL

-- 7. task_status_t values
SELECT 'task_status_t', unnest(enum_range(NULL::task_status_t))::text
UNION ALL

-- 8. user_status_t values
SELECT 'user_status_t', unnest(enum_range(NULL::user_status_t))::text
UNION ALL

-- 9. webhook_status_t values
SELECT 'webhook_status_t', unnest(enum_range(NULL::webhook_status_t))::text

ORDER BY enum_name, enum_value;
```

**The valid enum values fetched from the above SQL query for the demo data as of 2025-09-23 are:**
- **Case Status:** `open`, `in_progress`, `closed`, `rejected`
- **Case Priority:** `high`, `medium`, `low`
- **KYC Status:** `verified`, `pending`, `rejected`
- **Document Status:** `verified`, `pending`, `rejected`
- **Task Status:** `open`, `in_progress`, `completed`, `overdue`
- **Task Priority:** `high`, `normal`, `low`
- **User Status:** `active`, `inactive`
- **File Type:** `csv`, `doc`, `docx`, `jpeg`, `jpg`, `pdf`, `png`, `txt`, `xls`, `xlsx`
- **Webhook Status:** `failed`, `pending`, `processed`

When populating the database with initial demo data, ensure that the `cases` table includes a non-null `case_number` column. The `case_number` should follow a realistic case numbering system (e.g., `CASE-2024-001`).

To ensure unique keys for map operations in React components, use a combination of table name, row ID, and column name when generating keys. For example, use `${selectedTable}-row-${row.id || index}` for table rows,`${selectedTable}-col-${column.name}` for column headers, and `${selectedTable}-cell-${row.id || index}-${column.name}` for table cells. When mapping over arrays, always handle potential null or undefined data by using the optional chaining operator (?.). For example, use `(tableData?.data || []).map()` and `(tableSchema?.columns || []).map()`.

When a component has real-time auto-refresh functionality, make the auto-refresh optional with user controls. Provide a toggle checkbox for enabling/disabling auto-refresh and a clear visual indicator when auto-refresh is active. The default state should be auto-refresh OFF.

When the keys are not unique in a map function, it can lead to React key warnings. Ensure unique keys for table rows by using `${selectedTable}-row-${row.id || index}`. For table columns use `${selectedTable}-col-${column.name}` and for table cells use `${selectedTable}-cell-${row.id || index}-${column.name}`. Also ensure that the data being mapped over is not null or undefined by using `(tableData?.data || [])).map()` and (tableSchema?.columns || []).map()`. When using checkboxes, only allow selection of rows with valid IDs. The select all checkbox should handle undefined data gracefully.

#### Database Management System

The following rules apply to the Database Management System in the super admin dashboard:

-   The Super Admin must be able to view and manage all tables and their data.
-   Every table must be updatable, allowing adding, editing, and deleting entries according to the project's functionality, roles, and flow.
-   The system must handle missing tables gracefully and provide a way to create them.
-   The system must have real-time auto-refresh functionality.
-   The system must have unique keys for table rows, column headers, and table cells.
-   The system must handle null or undefined data gracefully.
-   CRUD operations wherever needed should be implemented using modals. Ensure these modals add, edit, and delete rows from Supabase.

The DatabaseManagement component now uses `row.id || index` for table rows, but if some rows don't have an `id` field or have duplicate IDs, this could cause React key warnings. Ensure unique keys for table rows by using `${selectedTable}-row-${row.id || index}`.

The keys for column headers are not unique. Use `${selectedTable}-col-${column.name}` to prevent conflicts between tables.

The keys for table cells are not unique. Use `${selectedTable}-cell-${row.id || index}-${column.name}` to prevent conflicts between tables.

Ensure data is not null or undefined by using `(tableData?.data || []).map()` and (tableSchema?.columns || []).map()`.

The "select all" checkbox logic must handle undefined data gracefully.

### 1. Smart Table Detection

-   **Missing Table Detection**: Properly identifies tables that don't exist vs. tables with errors
-   **Core Table Identification**: Distinguishes between essential tables and optional advanced feature tables
-   **Visual Status Indicators**:
    -   🟢 **Active** (green) - Table exists and working
    -   🟡 **Missing** (yellow) - Table doesn't exist yet
    -   🔴 **Error** (red) - Table has issues

### 2. Enhanced Dashboard Metrics

-   **5 Metric Cards**: Total Tables, Active Tables, Missing Tables, Total Records, Health Score
-   **Missing Tables Alert**: Yellow warning card when tables are missing
-   **Better Health Scoring**: Separate core health score tracking

### 3. Missing Tables Helper

-   **SQL Script Generator**: Automatically creates SQL scripts to build missing tables
-   **One-Click Copy**: Copy SQL scripts to clipboard
-   **Download Option**: Download SQL files for manual execution
-   **Step-by-step Instructions**: Clear guidance for creating tables in Supabase
-   **Table Dependencies**: Proper creation order for related tables

### 4. Improved Table Browser

-   **Core Table Badges**: Visual indicators for essential vs. optional tables
-   **Disabled Missing Tables**: Can't accidentally select missing tables
-   **Better Table Info**: Shows "Table not found" for missing tables
-   **Sorted Display**: Core tables appear first

### 5. Professional Error Handling

-   No More 404s**: Gracefully handles missing tables without console errors
-   **Smart Status Detection**: Distinguishes between "doesn't exist" and "permission denied"
-   **User-Friendly Messages**: Clear explanations instead of raw error codes

### 6. Auto-Refresh

-   Auto-refresh is now **OFF by default**. Provide a toggle checkbox for enabling/disabling auto-refresh and a clear visual indicator when auto-refresh is active.
-   You can enable/disable it with a checkbox.
-   Visual "Live" indicator when auto-refresh is active

#### Dynamic Table Management

To support dynamic table management with CRUD operations, the following priority of tables is defined. Full CRUD operations must be implemented for all tables, based on the roles and permissions defined in the system.

**Priority 1: Core Business Tables**
1.  **organizations** - ✅ Full CRUD
2.  **users** - ✅ Full CRUD
3.  **customers** - ✅ Full CRUD
4.  **cases** - ✅ Full CRUD
5.  **documents** - ✅ Full CRUD
6.  **products** - ✅ Full CRUD
7.  **departments** - ✅ Full CRUD
8.  **tasks** - ✅ Full CRUD
9.  **notifications** - ✅ Full CRUD

**Priority 2: Configuration Tables**
1.  **document_types** - ✅ Full CRUD
2.  **roles** - ✅ Full CRUD
3.  **permissions** - ✅ Full CRUD
4.  **task_types** - ✅ Full CRUD
5.  **employment_types** - ✅ Full CRUD
6.  **system_settings** - ✅ Full CRUD

**Priority 3: Advanced Features**
1.  **workflow_stages** - ✅ Full CRUD
2.  **workflow_transitions** - ✅ Full CRUD
3.  **compliance_issues** - ✅ Full CRUD
4.  **approval_queues** - ✅ Full CRUD
5.  **feature_flags** - ✅ Full CRUD

### Supabase Subscriptions

Supabase subscriptions are real-time connections that automatically push database changes to the frontend application the moment they happen. They provide "live updates" for database records.

The application uses fully functional subscriptions. The following tables have real-time updates:
- `cases` table: Case status changes, new cases, updates
- `documents` table: New documents, file changes, status updates
- `whatsapp_messages` table: New messages, delivery status
- `tasks` table: New tasks, status changes, assignments
- Multiple tables: Live statistics for dashboard stats
- `users` table: User additions, status changes for User Management
- `organizations` table: Org updates, user assignments for Organization Management
- `files` table: Uploads, downloads, changes for File Management
- `permissions/roles` tables: Access control changes for Permissions/Roles
- `loan_applications` table: Status changes, new submissions for Loan Applications

Subscription setup occurs in the database service. For example:
```typescript
// FROM: src/services/supabase-database.ts
static subscribeToCases(callback: (payload: any) => void) {
  return supabase
    .channel('cases')                    // Creates a subscription channel
    .on('postgres_changes',             // Listens for database changes
      { 
        event: '*',                     // All database events (INSERT, UPDATE, DELETE)
        schema: 'public', 
        table: SUPABASE_TABLES.CASES   // Which table to watch
      },
      callback                          // What function to call when change detected
    )
    .subscribe();                       // Activate the subscription
}
```

React hook integration occurs as follows:
```typescript
// FROM: src/hooks/useDashboardData.ts (Lines 215-224)
export function useCases(filters) {
  // ... existing state and fetchData ...

  // Set up real-time subscription
  useEffect(() => {
    const subscription = SupabaseDatabaseService.subscribeToCases((payload) => {
      console.log('Case real-time update:', payload);
      fetchData(); // Refetch on any change
    });

    return () => {
      subscription.unsubscribe(); // Clean up subscription
    };
  }, [fetchData]);
}
```

The complete flow in action is:
USER ACTION → DATABASE UPDATE → SUBSCRIPTION TRIGGER → UI AUTO-UPDATE

#### CRUD Modals

The application uses reusable modal components for CRUD operations, integrated with Supabase for real-time data persistence.

-   **Core Modal Components:**
    -   `src/components/ui/Modal.tsx` - Base modal framework
    -   `src/components/ui/FormModal.tsx` - Form handling and CRUD operations wrapper. This component supports loading states, validation, and real-time interaction. It utilizes `ValidatedInput`, `ValidatedSelect`, and `ValidatedTextarea` from `src/components/ui/FormField.tsx`.
-   **Entity-Specific CRUD Modals:**
    -   `src/components/modals/UserManagementModal.tsx` - User CRUD with role/org/department management
    -   `src/components/modals/CaseManagementModal.tsx` - Loan case creation and management
    -   `src/components/modals/DocumentManagementModal.tsx` - Document upload and file handling
    -   `src/components/modals/OrganizationManagementModal.tsx` - Organization setup and configuration
    -   `src/components/modals/CaseAssignmentModal.tsx` - Loan case assignment to team members
    -   `src/components/modals/CustomerManagementModal.tsx` - Customer CRUD with KYC and organization management
    -   `src/components/modals/DepartmentManagementModal.tsx` - Department CRUD with organization assignment

All components ensure that every **Save**, **Update**, or **Delete** operation goes directly to the Supabase database and retains the real state. They can be integrated into any page within the Veriphy Bank application to provide immediate CRUD functionality wherever data management is required.

The Database Management System should use these CRUD Modals.

## Main User Roles

The main roles are all below super admin. The super admin page is only for initial setup. The system must focus on the flow and functionality of other roles and perfect it. Every navigation and data should work with CRUD wherever required. There should not be any dead pages or no content errors for these main roles.

The system now properly distinguishes between:
- **Super Admin**: Manages ALL organizations and departments and customers globally. Has access to Customer Management.
- **Admin**: Manages only their own organization (limited scope)

To enable a Super Admin to manage all the organizations and their departments and customers, ensure the following:
1. **Authentication**: The user must have the `super_admin` role assigned in the database.
2. **Authorization**: The application must correctly interpret the `super_admin` role and grant access to the appropriate components and data.

## Super Admin Functionality (Reinstated 2025-10-03)

The system now supports the `super_admin` role, which has the capability to manage all organizations and their departments, and customers. Admin users can only manage their own organization. The Super Admin can:

-   Manage ALL Organizations: Create, update, delete any organization
-   Manage ALL Departments: Create departments for any organization
-   View ALL Users: See users across all organizations
-   Manage ALL Customers: Create, update, delete any customer
-   System-wide Statistics: Access to global system metrics
-   Cross-Organization Management: Full system administration

**Audit Logging for Super Admin Page**

Comprehensive audit logging must be implemented for all CRUD operations performed on the Super Admin page, specifically for customers, organizations, users, and departments. This includes:

-   **CRUD Operation Logging:** All create, read, update, and delete operations on the specified entities must be logged.
-   **Audit Log Table:** The `audit_logs` table structure should be used to store these logs. The table must be updated as soon as the CRUD operations occur. The actual table name is `logs` and should be used instead of `audit_logs`.
-   **Database Service Methods:** Enhance database service methods to include audit logging functionality for Super Admin CRUD operations.

**Super Admin Dynamic Password Authentication**

-   The Super Admin password is now validated against the `password_hash` field in the `users` table.
-   The login function must validate Super Admin passwords against the `password_hash` field in the `users` table.
-   There is no longer a default password.
-   The `getSuperAdminPassword()` and `setSuperAdminPassword()` methods are no longer used.
-   Audit logging must be implemented for password changes.

**Super Admin Navigation Menu**

The Super Admin navigation menu must be accessible and include the following items:

1.  Super Admin Dashboard (`/super-admin/dashboard`) - Main dashboard with real-time data
2.  System Monitoring (`/super-admin/monitoring`) - Real-time system performance monitoring
3.  Advanced User Management (`/super-admin/users`) - Advanced user management with bulk operations
4.  Workflow Designer (`/super-admin/workflow-designer`) - Design and manage business workflows
5.  Organizations (`/super-admin/organizations`) - Manage all organizations with Supabase integration
6.  Departments (`/super-admin/departments`) - Manage all departments with audit logging
7.  Customers (`/super-admin/customers`) - Manage all customers with comprehensive tracking
8.  Global Settings (`/system-settings`) - System-wide configuration
9.  System Audit (`/audit-logs`) - System audit logs and compliance
10. Super Admin Audit Logs (`/super-admin/audit-logs`) - Comprehensive audit logs for Super Admin operations
11. Global Analytics (`/analytics`) - System-wide analytics and reporting
12. Admin Tools (with sub-menu):
    - Loan Applications Management
    - Task Categories Management
    - Compliance Issues Management
    - User Profiles Management
    - Workflow Management
    - Background Processing
    - Cache Management
    - Entity Management

**Navigation Menu Accessibility**
- All navigation menu items for pages with dynamic data coming from Supabase must be enabled.
- The Super Admin navigation menu must be accessible.

**Super Admin Audit Logs**
- Super Admin Audit Logs must be added to the navigation menu.
- Super Admin Audit Logs must display comprehensive audit logs for Super Admin operations.

**Department Management Functionality**
- Department Management page must be fully functional with complete CRUD operations.
- Department Management in the Super Admin should display data in tables.
- Department Management page must be fully functional with complete CRUD operations.

**Organization Management Functionality**
- Organization Management page must be fully functional with complete CRUD operations.
- The Organization Management page must fetch data from the Supabase `organizations` table.
- Full CRUD operations must be enabled on the Organization Management page.

**Customer Management Functionality**
- Customer Management page must be fully functional with complete CRUD operations.
- Customer Management must be added to the Super Admin dashboard.

The following rules are effective as of 2025-10-03:
- The `getCustomers` method now fetches the correct fields from your actual table: `id`, `full_name`, `dob`, `mobile`, `email`, `address`, `external_customer_code`, `kyc_status`, `metadata`, `organization_id`, `phone`, `pan_number`, `aadhaar_number`, `date_of_birth`, `gender`, `marital_status`, `employment_type`, `risk_profile`, `deleted_at`, `user_id`
- The SuperAdminAuditLogs component now queries the `logs` table, not `audit_logs`
- The Super Admin password is dynamically retrieved from the system settings

To prevent foreign key constraint violations during deletion operations, the following cascading delete logic must be implemented:
- When deleting a customer:
    - Delete related workflow instances.
    - Delete related cases (loan applications).
    - Delete related documents.
    - Delete related tasks.
    - Delete related notifications.
    - Finally, delete the customer record.
- When deleting an organization:
    - Delete related departments.
    - Delete related users.
    - Delete related customers.
    - Delete related cases.
    - Delete related products.
    - Finally, delete the organization record.
- When deleting a department:
    - Update users to remove department reference.
    - Update child departments to remove parent reference.
    - Delete related tasks.
    - Finally, delete the department record.

The Super Admin can now manage all organizations globally with full database persistence and a professional user experience!

### Super Admin Capabilities (Effective 2025-10-03)

The Super Admin now has **complete management capabilities**:

1. ✅ **Organizations**: Manage all organizations globally
2. ✅ **Departments**: Manage departments across all organizations
3. ✅ **Users**: Manage all users across all organizations
4. ✅ **Customers**: Manage all customers across all organizations

All data comes dynamically from your Supabase database, and all operations persist to the database with proper error handling and user feedback!

### Super Admin Test Credentials (Effective 2025-10-03)

- **Super Admin:** superadmin@veriphy.com (MANAGES ALL ORGS)
- **Admin User:** admin@veriphy.com (MANAGES OWN ORG)

**Note:** Super Admin can manage all organizations and departments. Admin can only manage their own organization.

### User Table Columns (Effective 2025-10-03)

The system now properly handles:
- id
- full_name
- email
- mobile
- email_verified_at
- remember_token
- department_id
- employment_type_id
- organization_id
- status
- metadata
- created_at
- updated_at
- deleted_at
- auth_id
- role
- password_hash
- first_name
- last_name
- phone
- is_active
- last_login_at

### Customer Table Columns (Effective 2025-10-03)
Based on your actual table data: `[{"idx":0,"id":1,"full_name":"Ramesh Gupta","dob":null,"mobile":null,"email":"ramesh.gupta@email.com","address":null,"external_customer_code":null,"kyc_status":"verified","metadata":null,"organization_id":1,"created_at":"2025-09-23 19:29:51.565989+00","updated_at":"2025-09-23 19:29:51.565989+00","phone":null,"pan_number":null,"aadhaar_number":null,"date_of_birth":null,"gender":null,"marital_status":null,"employment_type":null,"risk_profile":"medium","deleted_at":null,"user_id":null}]`
The system now properly handles:
- ✅ **id**: Customer ID
- ✅ **full_name**: Full name
- ✅ **dob**: Date of birth
- ✅ **mobile**: Mobile number
- ✅ **email**: Email address
- ✅ **address**: Address information
- ✅ **external_customer_code**: External customer code
- ✅ **kyc_status**: KYC status
- ✅ **metadata**: Additional metadata
- ✅ **organization_id**: Organization ID
- ✅ **created_at**: Creation timestamp
- ✅ **updated_at**: Update timestamp
- ✅ **phone**: Phone number
- ✅ **pan_number**: PAN number
- ✅ **aadhaar_number**: Aadhaar number
- ✅ **date_of_birth**: Date of birth
- ✅ **gender**: Gender
- ✅ **marital_status**: Marital status
- ✅ **employment_type**: Employment type
- ✅ **risk_profile**: Risk profile
- ✅ **deleted_at**: Deletion timestamp
- ✅ **user_id**: User ID

### Organization Management (Effective 2025-10-03)

Your Organization Management is now **100% connected to Supabase**:

1. **Real Data**: All organizations come from your Supabase database
2. **Full CRUD**: Create, read, update, delete operations work perfectly
3. **Real-time Updates**: Changes reflect immediately
4. **Professional UI**: Clean, modern interface with proper error handling
5. **Advanced Filtering**: Search and filter capabilities

The Super Admin can now manage all organizations globally with full database persistence and a professional user experience!

### Super Admin Capabilities (Effective 2025-10-03)

The Super Admin now has **complete management capabilities**:

1. ✅ **Organizations**: Manage all organizations globally
2. ✅ **Departments**: Manage departments across all organizations
3. ✅ **Users**: Manage all users across all organizations
4. ✅ **Customers**: Manage all customers across all organizations

All data comes dynamically from your Supabase database, and all operations persist to the database with proper error handling and user feedback!

### Super Admin Test Credentials (Effective 2025-10-03)

- **Super Admin:** superadmin@veriphy.com (MANAGES ALL ORGS)
- **Admin User:** admin@veriphy.com (MANAGES OWN ORG)

**Note:** Super Admin can manage all organizations and departments. Admin can only manage their own organization.

### Department Management (Effective 2025-10-03)

The Department Management is now 100% functional.
- **Full CRUD**: Create, read, update, delete operations work perfectly
- **Real-time Updates**: Changes reflect immediately

### Audit Logging Schema (Effective 2025-10-05)

The `logs` table in Supabase has the following schema:
- `id`, `organization_id`, `user_id`, `action`, `entity_type`, `entity_id`, `description`

### Admin Dashboard Rules (Effective 2025-10-05)

The admin dashboard has been streamlined to focus on:

1.  Department Management: Manage organizational departments
2.  Roles Management: Create and manage user roles and permissions
3.  Permissions Management: Configure system permissions and access controls
4.  Products Management: Manage loan products and configurations
5.  Sub-Products Management: Manage sub-products and variants

All other functionalities have been removed to provide a cleaner and more focused administrative experience. The navigation has been updated accordingly.

### Products and Sub-Products